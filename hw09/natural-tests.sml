(*  Author: Norman Ramsey
 *
 *  Generated by testfest module sml.natural.  Use me to create tests
 *  for use with the Unit module *)

functor UnitTestsFun(structure Natural : NATURAL) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Natural
    
    (* fun negated n = op /-/ (ofInt 0, n) *) (* now obsolete *)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  val intString = (fn n =>
                  case N.decimal n
                    of [] => "the empty list of digits"
                     | ds => implode (map digitChar ds))
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 4 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "4"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 14 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "14"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 652 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "652"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 9640430227 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "9640430227"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 86415833793822266538 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "86415833793822266538"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a Natural with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 733 using literals, *, and +"
                                (fn () => (natString (N./+/ (N.ofInt (733), N./*/ (N.ofInt (1000), N.ofInt (0)))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "733"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 70493724584450543 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./*/ (N./+/ (N.ofInt (263), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (793), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (587), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (589), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (469), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (568), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (751), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./*/ (N./*/ (N./+/ (N.ofInt (672), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (685), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (444), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (79), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N./+/ (N.ofInt (723), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (798), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (376), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (495), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "70493724584450543"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 32517028532882531293973051650718873232318586430 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./*/ (N./*/ (N./+/ (N.ofInt (242), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (233), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (154), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (171), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (581), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (273), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (536), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (924), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./*/ (N./+/ (N.ofInt (709), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (461), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (254), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (623), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (819), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (18), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (379), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (244), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))), N./*/ (N./*/ (N./+/ (N.ofInt (336), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (115), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (208), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (624), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (204), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (605), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (126), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (345), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./*/ (N./+/ (N.ofInt (28), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (488), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (402), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (73), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (84), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (254), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (196), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (532), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "32517028532882531293973051650718873232318586430"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 890 - 460 = 430 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (890), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (460), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "430"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 780801 - 149117 = 631684 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (801), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (780), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (117), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (149), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "631684"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 955482282003 - 24831561531 = 930650720472 "
                                (fn () => (natString (N./-/ (N./+/ (N.ofInt (3), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (282), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (482), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (955), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (531), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (561), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (831), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (24), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "930650720472"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 647 = 968 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (647), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (968), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 723 = 440 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (723), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (440), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 434032 = 305139 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (32), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (434), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (139), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (305), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 945 != 558 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (945), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (558), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 807 != 172 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (807), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (172), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 646584 != 602376 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (584), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (646), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (376), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (602), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 245 < 515 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (245), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (515), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 530 < 189 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (530), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (189), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 897655 < 487344 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (655), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (897), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (344), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (487), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 541 > 11 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (541), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (11), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 575 > 121 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (575), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (121), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 201758 > 617394 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (758), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (201), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (394), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (617), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 291 <= 845 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (291), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (845), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 614 <= 285 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (614), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (285), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 650496 <= 780358 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (496), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (650), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (358), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (780), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 689 >= 213 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (689), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (213), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 935 >= 867 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (935), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (867), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 541757 >= 126138 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (757), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (541), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (138), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (126), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 981 = 981 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (981), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (981), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 529 = 529 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (529), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (529), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 998237 = 998237 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (237), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (998), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (237), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (998), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 511 != 511 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (511), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (511), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 752 != 752 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (752), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (752), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 998 != 998 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (998), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (0), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (998), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (0), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 626 < 626 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (626), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (626), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 984 < 984 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (984), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (984), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 25185 < 25185 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (185), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (25), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (185), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (25), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 89 > 89 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (89), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (89), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 760 > 760 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (760), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (760), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 318433 > 318433 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (433), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (318), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (433), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (318), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 586 <= 586 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (586), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (586), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 97 <= 97 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (97), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (97), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 812937 <= 812937 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (937), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (812), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (937), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (812), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 518 >= 518 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (518), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (518), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 832 >= 832 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (832), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (832), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 396690 >= 396690 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (690), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (396), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (690), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (396), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 33296 = 332 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (296), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (33), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (332), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 43141 = 508 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (141), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (43), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (508), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 37538173442295333 = 184 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (333), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (295), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (442), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (173), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (538), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (37), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (184), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 936743 != 947 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (743), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (936), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (947), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 276165 != 891 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (165), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (276), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (891), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 109018377800637056 != 813 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (56), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (637), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (800), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (377), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (18), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (109), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (813), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 435467 < 464 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (467), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (435), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (464), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 370948 < 667 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (948), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (370), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (667), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 2762749753994212 < 376 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (212), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (994), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (753), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (749), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (762), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (2), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (376), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 986844 > 181 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (844), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (986), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (181), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 781867 > 201 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (867), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (781), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (201), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 732720929526442160 > 223 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (160), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (442), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (526), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (929), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (720), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (732), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (223), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 845705 <= 996 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (705), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (845), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (996), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 51141 <= 266 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (141), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (51), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (266), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 414642143578150418 <= 495 (false), starting from literals of class Natural"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (418), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (150), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (578), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (143), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (642), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (414), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (495), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 232868 >= 251 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (868), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (232), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (251), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 173287 >= 581 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (287), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (173), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (581), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 203971451845380276 >= 882 (true), starting from literals of class Natural"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (276), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (380), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (845), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (451), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (971), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (203), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (882), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 487 div 5 = 97 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (487), N./*/ (N.ofInt (1000), N.ofInt (0))), 5)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "97"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 886786 div 1 = 886786 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (786), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (886), N./*/ (N.ofInt (1000), N.ofInt (0))))), 1)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "886786"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 695037877346 div 9 = 77226430816 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (346), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (877), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (37), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (695), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 9)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "77226430816"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 969 div 10 = 96 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (969), N./*/ (N.ofInt (1000), N.ofInt (0))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "96"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 3507 div 10 = 350 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (507), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (3), N./*/ (N.ofInt (1000), N.ofInt (0))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "350"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed Natural 799757864172 div 10 = 79975786417 "
                                (fn () => (natString ((#quotient o N.sdiv) (N./+/ (N.ofInt (172), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (864), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (757), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (799), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), 10)))
                                             handle        N.Negative => exn "Natural.Negative"
     | N.BadDivisor => exn "Natural.BadDivisor"
                                                  | e => exn ("exception " ^ exnName e))
                                "79975786417"
        

   in 
      Unit.report()
   end

end
