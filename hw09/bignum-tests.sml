(* Author: Norman Ramsey
 *
 *  Generated by testfest module sml.natural.  Use me to create tests
 *  for use with the Unit module *)

functor UnitTestsFun(structure Bignum : BIGNUM) : sig
    val run : unit -> unit
  end
= struct
  structure N = struct
    open Bignum
    val /+/ = <+>   val /-/ = <->   val /*/ = <*>
    (* fun negated n = op /-/ (ofInt 0, n) *) (* now obsolete *)
  end

  fun digitChar n = Char.chr (Char.ord #"0" + n)
  val natString = N.toString
  val intString = N.toString
  fun boolString p = if p then "true" else "false"

  fun exn s = "raised " ^ s

  fun run () =
    let

   
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 2 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "2"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 6 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "6"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 131 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "131"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 6969331983 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "6969331983"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 174244800283905349282 using only 1, 0, and +"
                                (fn () => (natString (let val test_value__ = N.ofInt (0)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
    val test_value__ = N./+/ (N.ofInt (1), test_value__)
    val test_value__ = N./+/ (test_value__, test_value__)
in  test_value__
end))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "174244800283905349282"
         
  val _  = Unit.checkExpectWith (fn s => s) "We created a LargeInteger with value zero"
                                (fn () => (natString (N.ofInt (0)))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "0"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 281 using literals, *, and +"
                                (fn () => (natString (N./+/ (N.ofInt (281), N./*/ (N.ofInt (1000), N.ofInt (0)))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "281"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 15874972665150773097302 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./*/ (N./*/ (N./+/ (N.ofInt (311), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (104), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (383), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (502), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./*/ (N./+/ (N.ofInt (402), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (987), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (799), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (306), N./*/ (N.ofInt (1000), N.ofInt (0))))))), N./+/ (N./+/ (N.ofInt (888), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (379), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./*/ (N./+/ (N.ofInt (185), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (263), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (384), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (688), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "15874972665150773097302"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 623291672910920832655506 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./+/ (N./*/ (N./+/ (N.ofInt (469), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (227), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (135), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (763), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (769), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (278), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (751), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (816), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./+/ (N./+/ (N.ofInt (955), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (157), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (113), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (692), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (890), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (952), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (236), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (911), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))), N./+/ (N.ofInt (0), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (239), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (37), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (340), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "623291672910920832655506"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -852 - 284 = -1136 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (852), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (284), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-1136"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -732758 - 334768 = -1067526 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (758), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (732), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (768), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (334), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-1067526"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -910901624742 - -139895516380 = -771006108362 "
                                (fn () => (intString (N./-/ (N.negated (N./+/ (N.ofInt (742), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (624), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (901), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (910), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N.negated (N./+/ (N.ofInt (380), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (516), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (895), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (139), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-771006108362"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 47684616 using literals, *, and +"
                                (fn () => (natString (N./+/ (N./*/ (N./+/ (N./+/ (N.ofInt (19), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (767), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./*/ (N./+/ (N.ofInt (76), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (787), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./*/ (N./+/ (N./+/ (N.ofInt (232), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (856), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./-/ (N./+/ (N.ofInt (646), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (28), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "47684616"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger 952498 using literals, *, and +"
                                (fn () => (natString (N./+/ (N.ofInt (498), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (952), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "952498"
         
  val _  = Unit.checkExpectWith (fn s => s) "We computed LargeInteger -232057024668736531763847829762741680 using literals, *, and +"
                                (fn () => (intString (N./*/ (N./+/ (N.ofInt (264), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (612), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (189), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (279), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./-/ (N./+/ (N./+/ (N.ofInt (104), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (668), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (414), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (217), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (69), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (132), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (157), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (800), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))), N./*/ (N./+/ (N.ofInt (613), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (710), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (265), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (858), N./*/ (N.ofInt (1000), N.ofInt (0))))))))), N./+/ (N.ofInt (111), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (192), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (442), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (968), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "-232057024668736531763847829762741680"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -247 = -20 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (247), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (20), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 849 = -384 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (849), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (384), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -862597 = -471650 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (597), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (862), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (650), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (471), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 985 != -760 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (985), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (760), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -421 != -331 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (421), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (331), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -222862 != 279044 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (862), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (222), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (44), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (279), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -696 < 517 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (696), N./*/ (N.ofInt (1000), N.ofInt (0)))), N./+/ (N.ofInt (517), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 340 < -928 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (340), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (928), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 42496 < -350871 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (496), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (42), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (871), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (350), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 617 > -887 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (617), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (887), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 127 > -604 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (127), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (604), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -399572 > -40709 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (572), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (399), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (709), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (40), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 19 <= -833 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (19), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (833), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 459 <= 74 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (459), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (74), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 186744 <= 120991 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (744), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (186), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (991), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (120), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 607 >= -176 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (607), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (176), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 259 >= -740 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (259), N./*/ (N.ofInt (1000), N.ofInt (0))), N.negated (N./+/ (N.ofInt (740), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 893754 >= -373483 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (754), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (893), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (483), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (373), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 518 = 518 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (518), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (518), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -745 = -745 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (745), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (745), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 559037 = 559037 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (37), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (559), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (37), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (559), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -480 != -480 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (480), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (480), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 546 != 546 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (546), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (546), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 102603 != 102603 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (603), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (102), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (603), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (102), N./*/ (N.ofInt (1000), N.ofInt (0))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 455 < 455 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (455), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (455), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 631 < 631 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (631), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (631), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -899203 < -899203 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (203), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (899), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (203), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (899), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 2 > 2 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (2), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (2), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 921 > 921 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (921), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (921), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -889918 > -889918 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (918), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (889), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (918), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (889), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -230 <= -230 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (230), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (230), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -302 <= -302 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (302), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (302), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -542177 <= -542177 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (177), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (542), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (177), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (542), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 116 >= 116 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (116), N./*/ (N.ofInt (1000), N.ofInt (0))), N./+/ (N.ofInt (116), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -742 >= -742 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (742), N./*/ (N.ofInt (1000), N.ofInt (0)))), N.negated (N./+/ (N.ofInt (742), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -761097 >= -761097 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (97), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (761), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N.negated (N./+/ (N.ofInt (97), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (761), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -301535 = 987 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (535), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (301), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (987), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -856238 = 479 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N.negated (N./+/ (N.ofInt (238), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (856), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (479), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 811299601604544246 = 427 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.== N.compare (N./+/ (N.ofInt (246), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (544), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (604), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (601), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (299), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (811), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (427), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 504885 != 626 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (885), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (504), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (626), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -953741 != 276 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N.negated (N./+/ (N.ofInt (741), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (953), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (276), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 900484309048035612 != 755 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.!= N.compare (N./+/ (N.ofInt (612), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (35), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (48), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (309), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (484), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (900), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N./+/ (N.ofInt (755), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 417578 < -81 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N./+/ (N.ofInt (578), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (417), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (81), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -653474 < 311 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (474), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (653), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (311), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -932162599540911306 < 377 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.< N.compare (N.negated (N./+/ (N.ofInt (306), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (911), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (540), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (599), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (162), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (932), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N./+/ (N.ofInt (377), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -887164 > 569 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (164), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (887), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (569), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 517060 > -670 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N./+/ (N.ofInt (60), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (517), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (670), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -56910949988570550 > -95 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.> N.compare (N.negated (N./+/ (N.ofInt (550), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (570), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (988), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (949), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (910), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (56), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N.negated (N./+/ (N.ofInt (95), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 166039 <= -13 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N./+/ (N.ofInt (39), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (166), N./*/ (N.ofInt (1000), N.ofInt (0))))), N.negated (N./+/ (N.ofInt (13), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -843535 <= 290 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (535), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (843), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (290), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -341657084434771297 <= 692 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.<= N.compare (N.negated (N./+/ (N.ofInt (297), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (771), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (434), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (84), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (657), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (341), N./*/ (N.ofInt (1000), N.ofInt (0)))))))))))))), N./+/ (N.ofInt (692), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 263150 >= 944 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (150), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (263), N./*/ (N.ofInt (1000), N.ofInt (0))))), N./+/ (N.ofInt (944), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested -91962 >= 295 (false), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N.negated (N./+/ (N.ofInt (962), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (91), N./*/ (N.ofInt (1000), N.ofInt (0)))))), N./+/ (N.ofInt (295), N./*/ (N.ofInt (1000), N.ofInt (0))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "false"
         
  val _  = Unit.checkExpectWith (fn s => s) "We tested 932796528430504478 >= -156 (true), starting from literals of class LargeInteger"
                                (fn () => (boolString (Relational.>= N.compare (N./+/ (N.ofInt (478), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (504), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (430), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (528), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (796), N./*/ (N.ofInt (1000), N./+/ (N.ofInt (932), N./*/ (N.ofInt (1000), N.ofInt (0))))))))))))), N.negated (N./+/ (N.ofInt (156), N./*/ (N.ofInt (1000), N.ofInt (0)))))))
                                             handle N.BadDivision => exn "Bignum.BadDivision"
                                                  | e => exn ("exception " ^ exnName e))
                                "true"
        

   in 
      Unit.report()
   end

end
